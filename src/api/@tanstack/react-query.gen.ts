// This file is auto-generated by @hey-api/openapi-ts

import { type Options, appControllerGetHello, userControllerGetMyProfile, userControllerGetUsers, userControllerGetUser, userControllerUpdateUser, authControllerLogin, authControllerRegisterLocal, authControllerRefreshToken, organizationControllerGetOrgs, organizationControllerAddOrg, organizationControllerDeleteOrganization, organizationControllerGetOneOrganization, organizationControllerUpdateOrganization, tagControllerGetTags, tagControllerAddTag, tagControllerGetTagsType, imagekitControllerGetAuthParamas, eventsControllerGetEvents, eventsControllerAddEvent, eventsControllerDeleteEvent, eventsControllerGetOneEvent, eventsControllerUpdateEvent, newsControllerGetNews, newsControllerAddNews, newsControllerDeleteNews, newsControllerGetOneNews, newsControllerUpdateNews, opportunityControllerGetOpportunities, opportunityControllerAddOpportutnity, opportunityControllerDeleteOpportunity, opportunityControllerGetOneOpportunity, opportunityControllerUpdateOpportunity, analyticsControllerGetAdminAnalytics } from '../sdk.gen';
import { queryOptions, infiniteQueryOptions, type InfiniteData, type UseMutationOptions, type DefaultError } from '@tanstack/react-query';
import type { AppControllerGetHelloData, UserControllerGetMyProfileData, UserControllerGetUsersData, UserControllerGetUsersError, UserControllerGetUsersResponse, UserControllerGetUserData, UserControllerUpdateUserData, UserControllerUpdateUserError, UserControllerUpdateUserResponse, AuthControllerLoginData, AuthControllerLoginError, AuthControllerLoginResponse, AuthControllerRegisterLocalData, AuthControllerRegisterLocalResponse, AuthControllerRefreshTokenData, AuthControllerRefreshTokenError, AuthControllerRefreshTokenResponse, OrganizationControllerGetOrgsData, OrganizationControllerGetOrgsError, OrganizationControllerGetOrgsResponse, OrganizationControllerAddOrgData, OrganizationControllerAddOrgError, OrganizationControllerAddOrgResponse, OrganizationControllerDeleteOrganizationData, OrganizationControllerDeleteOrganizationError, OrganizationControllerDeleteOrganizationResponse, OrganizationControllerGetOneOrganizationData, OrganizationControllerUpdateOrganizationData, OrganizationControllerUpdateOrganizationError, OrganizationControllerUpdateOrganizationResponse, TagControllerGetTagsData, TagControllerGetTagsError, TagControllerGetTagsResponse, TagControllerAddTagData, TagControllerAddTagError, TagControllerAddTagResponse, TagControllerGetTagsTypeData, ImagekitControllerGetAuthParamasData, EventsControllerGetEventsData, EventsControllerGetEventsError, EventsControllerGetEventsResponse, EventsControllerAddEventData, EventsControllerAddEventError, EventsControllerAddEventResponse, EventsControllerDeleteEventData, EventsControllerDeleteEventError, EventsControllerDeleteEventResponse, EventsControllerGetOneEventData, EventsControllerUpdateEventData, EventsControllerUpdateEventError, EventsControllerUpdateEventResponse, NewsControllerGetNewsData, NewsControllerGetNewsError, NewsControllerGetNewsResponse, NewsControllerAddNewsData, NewsControllerAddNewsError, NewsControllerAddNewsResponse, NewsControllerDeleteNewsData, NewsControllerDeleteNewsError, NewsControllerDeleteNewsResponse, NewsControllerGetOneNewsData, NewsControllerUpdateNewsData, NewsControllerUpdateNewsError, NewsControllerUpdateNewsResponse, OpportunityControllerGetOpportunitiesData, OpportunityControllerGetOpportunitiesError, OpportunityControllerGetOpportunitiesResponse, OpportunityControllerAddOpportutnityData, OpportunityControllerAddOpportutnityError, OpportunityControllerAddOpportutnityResponse, OpportunityControllerDeleteOpportunityData, OpportunityControllerDeleteOpportunityError, OpportunityControllerDeleteOpportunityResponse, OpportunityControllerGetOneOpportunityData, OpportunityControllerUpdateOpportunityData, OpportunityControllerUpdateOpportunityError, OpportunityControllerUpdateOpportunityResponse, AnalyticsControllerGetAdminAnalyticsData } from '../types.gen';
import { client as _heyApiClient } from '../client.gen';

export type QueryKey<TOptions extends Options> = [
    Pick<TOptions, 'baseUrl' | 'body' | 'headers' | 'path' | 'query'> & {
        _id: string;
        _infinite?: boolean;
    }
];

const createQueryKey = <TOptions extends Options>(id: string, options?: TOptions, infinite?: boolean): [
    QueryKey<TOptions>[0]
] => {
    const params: QueryKey<TOptions>[0] = { _id: id, baseUrl: (options?.client ?? _heyApiClient).getConfig().baseUrl } as QueryKey<TOptions>[0];
    if (infinite) {
        params._infinite = infinite;
    }
    if (options?.body) {
        params.body = options.body;
    }
    if (options?.headers) {
        params.headers = options.headers;
    }
    if (options?.path) {
        params.path = options.path;
    }
    if (options?.query) {
        params.query = options.query;
    }
    return [
        params
    ];
};

export const appControllerGetHelloQueryKey = (options?: Options<AppControllerGetHelloData>) => createQueryKey('appControllerGetHello', options);

export const appControllerGetHelloOptions = (options?: Options<AppControllerGetHelloData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await appControllerGetHello({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: appControllerGetHelloQueryKey(options)
    });
};

export const userControllerGetMyProfileQueryKey = (options?: Options<UserControllerGetMyProfileData>) => createQueryKey('userControllerGetMyProfile', options);

export const userControllerGetMyProfileOptions = (options?: Options<UserControllerGetMyProfileData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await userControllerGetMyProfile({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: userControllerGetMyProfileQueryKey(options)
    });
};

export const userControllerGetUsersQueryKey = (options?: Options<UserControllerGetUsersData>) => createQueryKey('userControllerGetUsers', options);

export const userControllerGetUsersOptions = (options?: Options<UserControllerGetUsersData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await userControllerGetUsers({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: userControllerGetUsersQueryKey(options)
    });
};

const createInfiniteParams = <K extends Pick<QueryKey<Options>[0], 'body' | 'headers' | 'path' | 'query'>>(queryKey: QueryKey<Options>, page: K) => {
    const params = queryKey[0];
    if (page.body) {
        params.body = {
            ...queryKey[0].body as any,
            ...page.body as any
        };
    }
    if (page.headers) {
        params.headers = {
            ...queryKey[0].headers,
            ...page.headers
        };
    }
    if (page.path) {
        params.path = {
            ...queryKey[0].path as any,
            ...page.path as any
        };
    }
    if (page.query) {
        params.query = {
            ...queryKey[0].query as any,
            ...page.query as any
        };
    }
    return params as unknown as typeof page;
};

export const userControllerGetUsersInfiniteQueryKey = (options?: Options<UserControllerGetUsersData>): QueryKey<Options<UserControllerGetUsersData>> => createQueryKey('userControllerGetUsers', options, true);

export const userControllerGetUsersInfiniteOptions = (options?: Options<UserControllerGetUsersData>) => {
    return infiniteQueryOptions<UserControllerGetUsersResponse, UserControllerGetUsersError, InfiniteData<UserControllerGetUsersResponse>, QueryKey<Options<UserControllerGetUsersData>>, number | Pick<QueryKey<Options<UserControllerGetUsersData>>[0], 'body' | 'headers' | 'path' | 'query'>>(
    // @ts-ignore
    {
        queryFn: async ({ pageParam, queryKey, signal }) => {
            // @ts-ignore
            const page: Pick<QueryKey<Options<UserControllerGetUsersData>>[0], 'body' | 'headers' | 'path' | 'query'> = typeof pageParam === 'object' ? pageParam : {
                query: {
                    offset: pageParam
                }
            };
            const params = createInfiniteParams(queryKey, page);
            const { data } = await userControllerGetUsers({
                ...options,
                ...params,
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: userControllerGetUsersInfiniteQueryKey(options)
    });
};

export const userControllerGetUserQueryKey = (options: Options<UserControllerGetUserData>) => createQueryKey('userControllerGetUser', options);

export const userControllerGetUserOptions = (options: Options<UserControllerGetUserData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await userControllerGetUser({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: userControllerGetUserQueryKey(options)
    });
};

export const userControllerUpdateUserMutation = (options?: Partial<Options<UserControllerUpdateUserData>>) => {
    const mutationOptions: UseMutationOptions<UserControllerUpdateUserResponse, UserControllerUpdateUserError, Options<UserControllerUpdateUserData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await userControllerUpdateUser({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const authControllerLoginQueryKey = (options: Options<AuthControllerLoginData>) => createQueryKey('authControllerLogin', options);

export const authControllerLoginOptions = (options: Options<AuthControllerLoginData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await authControllerLogin({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: authControllerLoginQueryKey(options)
    });
};

export const authControllerLoginMutation = (options?: Partial<Options<AuthControllerLoginData>>) => {
    const mutationOptions: UseMutationOptions<AuthControllerLoginResponse, AuthControllerLoginError, Options<AuthControllerLoginData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await authControllerLogin({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const authControllerRegisterLocalQueryKey = (options: Options<AuthControllerRegisterLocalData>) => createQueryKey('authControllerRegisterLocal', options);

export const authControllerRegisterLocalOptions = (options: Options<AuthControllerRegisterLocalData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await authControllerRegisterLocal({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: authControllerRegisterLocalQueryKey(options)
    });
};

export const authControllerRegisterLocalMutation = (options?: Partial<Options<AuthControllerRegisterLocalData>>) => {
    const mutationOptions: UseMutationOptions<AuthControllerRegisterLocalResponse, DefaultError, Options<AuthControllerRegisterLocalData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await authControllerRegisterLocal({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const authControllerRefreshTokenQueryKey = (options: Options<AuthControllerRefreshTokenData>) => createQueryKey('authControllerRefreshToken', options);

export const authControllerRefreshTokenOptions = (options: Options<AuthControllerRefreshTokenData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await authControllerRefreshToken({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: authControllerRefreshTokenQueryKey(options)
    });
};

export const authControllerRefreshTokenMutation = (options?: Partial<Options<AuthControllerRefreshTokenData>>) => {
    const mutationOptions: UseMutationOptions<AuthControllerRefreshTokenResponse, AuthControllerRefreshTokenError, Options<AuthControllerRefreshTokenData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await authControllerRefreshToken({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const organizationControllerGetOrgsQueryKey = (options: Options<OrganizationControllerGetOrgsData>) => createQueryKey('organizationControllerGetOrgs', options);

export const organizationControllerGetOrgsOptions = (options: Options<OrganizationControllerGetOrgsData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await organizationControllerGetOrgs({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: organizationControllerGetOrgsQueryKey(options)
    });
};

export const organizationControllerGetOrgsInfiniteQueryKey = (options: Options<OrganizationControllerGetOrgsData>): QueryKey<Options<OrganizationControllerGetOrgsData>> => createQueryKey('organizationControllerGetOrgs', options, true);

export const organizationControllerGetOrgsInfiniteOptions = (options: Options<OrganizationControllerGetOrgsData>) => {
    return infiniteQueryOptions<OrganizationControllerGetOrgsResponse, OrganizationControllerGetOrgsError, InfiniteData<OrganizationControllerGetOrgsResponse>, QueryKey<Options<OrganizationControllerGetOrgsData>>, number | Pick<QueryKey<Options<OrganizationControllerGetOrgsData>>[0], 'body' | 'headers' | 'path' | 'query'>>(
    // @ts-ignore
    {
        queryFn: async ({ pageParam, queryKey, signal }) => {
            // @ts-ignore
            const page: Pick<QueryKey<Options<OrganizationControllerGetOrgsData>>[0], 'body' | 'headers' | 'path' | 'query'> = typeof pageParam === 'object' ? pageParam : {
                query: {
                    offset: pageParam
                }
            };
            const params = createInfiniteParams(queryKey, page);
            const { data } = await organizationControllerGetOrgs({
                ...options,
                ...params,
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: organizationControllerGetOrgsInfiniteQueryKey(options)
    });
};

export const organizationControllerAddOrgQueryKey = (options: Options<OrganizationControllerAddOrgData>) => createQueryKey('organizationControllerAddOrg', options);

export const organizationControllerAddOrgOptions = (options: Options<OrganizationControllerAddOrgData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await organizationControllerAddOrg({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: organizationControllerAddOrgQueryKey(options)
    });
};

export const organizationControllerAddOrgMutation = (options?: Partial<Options<OrganizationControllerAddOrgData>>) => {
    const mutationOptions: UseMutationOptions<OrganizationControllerAddOrgResponse, OrganizationControllerAddOrgError, Options<OrganizationControllerAddOrgData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await organizationControllerAddOrg({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const organizationControllerDeleteOrganizationMutation = (options?: Partial<Options<OrganizationControllerDeleteOrganizationData>>) => {
    const mutationOptions: UseMutationOptions<OrganizationControllerDeleteOrganizationResponse, OrganizationControllerDeleteOrganizationError, Options<OrganizationControllerDeleteOrganizationData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await organizationControllerDeleteOrganization({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const organizationControllerGetOneOrganizationQueryKey = (options: Options<OrganizationControllerGetOneOrganizationData>) => createQueryKey('organizationControllerGetOneOrganization', options);

export const organizationControllerGetOneOrganizationOptions = (options: Options<OrganizationControllerGetOneOrganizationData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await organizationControllerGetOneOrganization({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: organizationControllerGetOneOrganizationQueryKey(options)
    });
};

export const organizationControllerUpdateOrganizationMutation = (options?: Partial<Options<OrganizationControllerUpdateOrganizationData>>) => {
    const mutationOptions: UseMutationOptions<OrganizationControllerUpdateOrganizationResponse, OrganizationControllerUpdateOrganizationError, Options<OrganizationControllerUpdateOrganizationData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await organizationControllerUpdateOrganization({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const tagControllerGetTagsQueryKey = (options?: Options<TagControllerGetTagsData>) => createQueryKey('tagControllerGetTags', options);

export const tagControllerGetTagsOptions = (options?: Options<TagControllerGetTagsData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await tagControllerGetTags({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: tagControllerGetTagsQueryKey(options)
    });
};

export const tagControllerGetTagsInfiniteQueryKey = (options?: Options<TagControllerGetTagsData>): QueryKey<Options<TagControllerGetTagsData>> => createQueryKey('tagControllerGetTags', options, true);

export const tagControllerGetTagsInfiniteOptions = (options?: Options<TagControllerGetTagsData>) => {
    return infiniteQueryOptions<TagControllerGetTagsResponse, TagControllerGetTagsError, InfiniteData<TagControllerGetTagsResponse>, QueryKey<Options<TagControllerGetTagsData>>, number | Pick<QueryKey<Options<TagControllerGetTagsData>>[0], 'body' | 'headers' | 'path' | 'query'>>(
    // @ts-ignore
    {
        queryFn: async ({ pageParam, queryKey, signal }) => {
            // @ts-ignore
            const page: Pick<QueryKey<Options<TagControllerGetTagsData>>[0], 'body' | 'headers' | 'path' | 'query'> = typeof pageParam === 'object' ? pageParam : {
                query: {
                    offset: pageParam
                }
            };
            const params = createInfiniteParams(queryKey, page);
            const { data } = await tagControllerGetTags({
                ...options,
                ...params,
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: tagControllerGetTagsInfiniteQueryKey(options)
    });
};

export const tagControllerAddTagQueryKey = (options: Options<TagControllerAddTagData>) => createQueryKey('tagControllerAddTag', options);

export const tagControllerAddTagOptions = (options: Options<TagControllerAddTagData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await tagControllerAddTag({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: tagControllerAddTagQueryKey(options)
    });
};

export const tagControllerAddTagMutation = (options?: Partial<Options<TagControllerAddTagData>>) => {
    const mutationOptions: UseMutationOptions<TagControllerAddTagResponse, TagControllerAddTagError, Options<TagControllerAddTagData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await tagControllerAddTag({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const tagControllerGetTagsTypeQueryKey = (options: Options<TagControllerGetTagsTypeData>) => createQueryKey('tagControllerGetTagsType', options);

export const tagControllerGetTagsTypeOptions = (options: Options<TagControllerGetTagsTypeData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await tagControllerGetTagsType({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: tagControllerGetTagsTypeQueryKey(options)
    });
};

export const imagekitControllerGetAuthParamasQueryKey = (options?: Options<ImagekitControllerGetAuthParamasData>) => createQueryKey('imagekitControllerGetAuthParamas', options);

export const imagekitControllerGetAuthParamasOptions = (options?: Options<ImagekitControllerGetAuthParamasData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await imagekitControllerGetAuthParamas({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: imagekitControllerGetAuthParamasQueryKey(options)
    });
};

export const eventsControllerGetEventsQueryKey = (options: Options<EventsControllerGetEventsData>) => createQueryKey('eventsControllerGetEvents', options);

export const eventsControllerGetEventsOptions = (options: Options<EventsControllerGetEventsData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await eventsControllerGetEvents({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: eventsControllerGetEventsQueryKey(options)
    });
};

export const eventsControllerGetEventsInfiniteQueryKey = (options: Options<EventsControllerGetEventsData>): QueryKey<Options<EventsControllerGetEventsData>> => createQueryKey('eventsControllerGetEvents', options, true);

export const eventsControllerGetEventsInfiniteOptions = (options: Options<EventsControllerGetEventsData>) => {
    return infiniteQueryOptions<EventsControllerGetEventsResponse, EventsControllerGetEventsError, InfiniteData<EventsControllerGetEventsResponse>, QueryKey<Options<EventsControllerGetEventsData>>, number | Pick<QueryKey<Options<EventsControllerGetEventsData>>[0], 'body' | 'headers' | 'path' | 'query'>>(
    // @ts-ignore
    {
        queryFn: async ({ pageParam, queryKey, signal }) => {
            // @ts-ignore
            const page: Pick<QueryKey<Options<EventsControllerGetEventsData>>[0], 'body' | 'headers' | 'path' | 'query'> = typeof pageParam === 'object' ? pageParam : {
                query: {
                    offset: pageParam
                }
            };
            const params = createInfiniteParams(queryKey, page);
            const { data } = await eventsControllerGetEvents({
                ...options,
                ...params,
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: eventsControllerGetEventsInfiniteQueryKey(options)
    });
};

export const eventsControllerAddEventQueryKey = (options: Options<EventsControllerAddEventData>) => createQueryKey('eventsControllerAddEvent', options);

export const eventsControllerAddEventOptions = (options: Options<EventsControllerAddEventData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await eventsControllerAddEvent({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: eventsControllerAddEventQueryKey(options)
    });
};

export const eventsControllerAddEventMutation = (options?: Partial<Options<EventsControllerAddEventData>>) => {
    const mutationOptions: UseMutationOptions<EventsControllerAddEventResponse, EventsControllerAddEventError, Options<EventsControllerAddEventData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await eventsControllerAddEvent({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const eventsControllerDeleteEventMutation = (options?: Partial<Options<EventsControllerDeleteEventData>>) => {
    const mutationOptions: UseMutationOptions<EventsControllerDeleteEventResponse, EventsControllerDeleteEventError, Options<EventsControllerDeleteEventData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await eventsControllerDeleteEvent({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const eventsControllerGetOneEventQueryKey = (options: Options<EventsControllerGetOneEventData>) => createQueryKey('eventsControllerGetOneEvent', options);

export const eventsControllerGetOneEventOptions = (options: Options<EventsControllerGetOneEventData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await eventsControllerGetOneEvent({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: eventsControllerGetOneEventQueryKey(options)
    });
};

export const eventsControllerUpdateEventMutation = (options?: Partial<Options<EventsControllerUpdateEventData>>) => {
    const mutationOptions: UseMutationOptions<EventsControllerUpdateEventResponse, EventsControllerUpdateEventError, Options<EventsControllerUpdateEventData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await eventsControllerUpdateEvent({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const newsControllerGetNewsQueryKey = (options?: Options<NewsControllerGetNewsData>) => createQueryKey('newsControllerGetNews', options);

export const newsControllerGetNewsOptions = (options?: Options<NewsControllerGetNewsData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await newsControllerGetNews({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: newsControllerGetNewsQueryKey(options)
    });
};

export const newsControllerGetNewsInfiniteQueryKey = (options?: Options<NewsControllerGetNewsData>): QueryKey<Options<NewsControllerGetNewsData>> => createQueryKey('newsControllerGetNews', options, true);

export const newsControllerGetNewsInfiniteOptions = (options?: Options<NewsControllerGetNewsData>) => {
    return infiniteQueryOptions<NewsControllerGetNewsResponse, NewsControllerGetNewsError, InfiniteData<NewsControllerGetNewsResponse>, QueryKey<Options<NewsControllerGetNewsData>>, number | Pick<QueryKey<Options<NewsControllerGetNewsData>>[0], 'body' | 'headers' | 'path' | 'query'>>(
    // @ts-ignore
    {
        queryFn: async ({ pageParam, queryKey, signal }) => {
            // @ts-ignore
            const page: Pick<QueryKey<Options<NewsControllerGetNewsData>>[0], 'body' | 'headers' | 'path' | 'query'> = typeof pageParam === 'object' ? pageParam : {
                query: {
                    offset: pageParam
                }
            };
            const params = createInfiniteParams(queryKey, page);
            const { data } = await newsControllerGetNews({
                ...options,
                ...params,
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: newsControllerGetNewsInfiniteQueryKey(options)
    });
};

export const newsControllerAddNewsQueryKey = (options: Options<NewsControllerAddNewsData>) => createQueryKey('newsControllerAddNews', options);

export const newsControllerAddNewsOptions = (options: Options<NewsControllerAddNewsData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await newsControllerAddNews({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: newsControllerAddNewsQueryKey(options)
    });
};

export const newsControllerAddNewsMutation = (options?: Partial<Options<NewsControllerAddNewsData>>) => {
    const mutationOptions: UseMutationOptions<NewsControllerAddNewsResponse, NewsControllerAddNewsError, Options<NewsControllerAddNewsData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await newsControllerAddNews({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const newsControllerDeleteNewsMutation = (options?: Partial<Options<NewsControllerDeleteNewsData>>) => {
    const mutationOptions: UseMutationOptions<NewsControllerDeleteNewsResponse, NewsControllerDeleteNewsError, Options<NewsControllerDeleteNewsData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await newsControllerDeleteNews({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const newsControllerGetOneNewsQueryKey = (options: Options<NewsControllerGetOneNewsData>) => createQueryKey('newsControllerGetOneNews', options);

export const newsControllerGetOneNewsOptions = (options: Options<NewsControllerGetOneNewsData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await newsControllerGetOneNews({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: newsControllerGetOneNewsQueryKey(options)
    });
};

export const newsControllerUpdateNewsMutation = (options?: Partial<Options<NewsControllerUpdateNewsData>>) => {
    const mutationOptions: UseMutationOptions<NewsControllerUpdateNewsResponse, NewsControllerUpdateNewsError, Options<NewsControllerUpdateNewsData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await newsControllerUpdateNews({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const opportunityControllerGetOpportunitiesQueryKey = (options: Options<OpportunityControllerGetOpportunitiesData>) => createQueryKey('opportunityControllerGetOpportunities', options);

export const opportunityControllerGetOpportunitiesOptions = (options: Options<OpportunityControllerGetOpportunitiesData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await opportunityControllerGetOpportunities({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: opportunityControllerGetOpportunitiesQueryKey(options)
    });
};

export const opportunityControllerGetOpportunitiesInfiniteQueryKey = (options: Options<OpportunityControllerGetOpportunitiesData>): QueryKey<Options<OpportunityControllerGetOpportunitiesData>> => createQueryKey('opportunityControllerGetOpportunities', options, true);

export const opportunityControllerGetOpportunitiesInfiniteOptions = (options: Options<OpportunityControllerGetOpportunitiesData>) => {
    return infiniteQueryOptions<OpportunityControllerGetOpportunitiesResponse, OpportunityControllerGetOpportunitiesError, InfiniteData<OpportunityControllerGetOpportunitiesResponse>, QueryKey<Options<OpportunityControllerGetOpportunitiesData>>, number | Pick<QueryKey<Options<OpportunityControllerGetOpportunitiesData>>[0], 'body' | 'headers' | 'path' | 'query'>>(
    // @ts-ignore
    {
        queryFn: async ({ pageParam, queryKey, signal }) => {
            // @ts-ignore
            const page: Pick<QueryKey<Options<OpportunityControllerGetOpportunitiesData>>[0], 'body' | 'headers' | 'path' | 'query'> = typeof pageParam === 'object' ? pageParam : {
                query: {
                    offset: pageParam
                }
            };
            const params = createInfiniteParams(queryKey, page);
            const { data } = await opportunityControllerGetOpportunities({
                ...options,
                ...params,
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: opportunityControllerGetOpportunitiesInfiniteQueryKey(options)
    });
};

export const opportunityControllerAddOpportutnityQueryKey = (options: Options<OpportunityControllerAddOpportutnityData>) => createQueryKey('opportunityControllerAddOpportutnity', options);

export const opportunityControllerAddOpportutnityOptions = (options: Options<OpportunityControllerAddOpportutnityData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await opportunityControllerAddOpportutnity({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: opportunityControllerAddOpportutnityQueryKey(options)
    });
};

export const opportunityControllerAddOpportutnityMutation = (options?: Partial<Options<OpportunityControllerAddOpportutnityData>>) => {
    const mutationOptions: UseMutationOptions<OpportunityControllerAddOpportutnityResponse, OpportunityControllerAddOpportutnityError, Options<OpportunityControllerAddOpportutnityData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await opportunityControllerAddOpportutnity({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const opportunityControllerDeleteOpportunityMutation = (options?: Partial<Options<OpportunityControllerDeleteOpportunityData>>) => {
    const mutationOptions: UseMutationOptions<OpportunityControllerDeleteOpportunityResponse, OpportunityControllerDeleteOpportunityError, Options<OpportunityControllerDeleteOpportunityData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await opportunityControllerDeleteOpportunity({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const opportunityControllerGetOneOpportunityQueryKey = (options: Options<OpportunityControllerGetOneOpportunityData>) => createQueryKey('opportunityControllerGetOneOpportunity', options);

export const opportunityControllerGetOneOpportunityOptions = (options: Options<OpportunityControllerGetOneOpportunityData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await opportunityControllerGetOneOpportunity({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: opportunityControllerGetOneOpportunityQueryKey(options)
    });
};

export const opportunityControllerUpdateOpportunityMutation = (options?: Partial<Options<OpportunityControllerUpdateOpportunityData>>) => {
    const mutationOptions: UseMutationOptions<OpportunityControllerUpdateOpportunityResponse, OpportunityControllerUpdateOpportunityError, Options<OpportunityControllerUpdateOpportunityData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await opportunityControllerUpdateOpportunity({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const analyticsControllerGetAdminAnalyticsQueryKey = (options?: Options<AnalyticsControllerGetAdminAnalyticsData>) => createQueryKey('analyticsControllerGetAdminAnalytics', options);

export const analyticsControllerGetAdminAnalyticsOptions = (options?: Options<AnalyticsControllerGetAdminAnalyticsData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await analyticsControllerGetAdminAnalytics({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: analyticsControllerGetAdminAnalyticsQueryKey(options)
    });
};