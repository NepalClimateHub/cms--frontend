// This file is auto-generated by @hey-api/openapi-ts

import type { Options as ClientOptions, TDataShape, Client } from '@hey-api/client-fetch';
import type { AppControllerGetHelloData, UserControllerGetMyProfileData, UserControllerGetMyProfileResponse, UserControllerGetMyProfileError, UserControllerGetUsersData, UserControllerGetUsersResponse, UserControllerGetUsersError, UserControllerGetUserData, UserControllerGetUserResponse, UserControllerGetUserError, UserControllerUpdateUserData, UserControllerUpdateUserResponse, UserControllerUpdateUserError, AuthControllerLoginData, AuthControllerLoginResponse, AuthControllerLoginError, AuthControllerRegisterLocalData, AuthControllerRegisterLocalResponse, AuthControllerRefreshTokenData, AuthControllerRefreshTokenResponse, AuthControllerRefreshTokenError, OrganizationControllerGetOrgsData, OrganizationControllerGetOrgsResponse, OrganizationControllerGetOrgsError, OrganizationControllerAddOrgData, OrganizationControllerAddOrgResponse, OrganizationControllerAddOrgError, OrganizationControllerDeleteOrganizationData, OrganizationControllerDeleteOrganizationResponse, OrganizationControllerDeleteOrganizationError, OrganizationControllerGetOneOrganizationData, OrganizationControllerGetOneOrganizationResponse, OrganizationControllerGetOneOrganizationError, OrganizationControllerUpdateOrganizationData, OrganizationControllerUpdateOrganizationResponse, OrganizationControllerUpdateOrganizationError, TagControllerGetTagsData, TagControllerGetTagsResponse, TagControllerGetTagsError, TagControllerAddTagData, TagControllerAddTagResponse, TagControllerAddTagError, TagControllerGetTagsTypeData, TagControllerGetTagsTypeResponse, TagControllerGetTagsTypeError, ImagekitControllerGetAuthParamasData, ImagekitControllerGetAuthParamasResponse, ImagekitControllerGetAuthParamasError, EventsControllerGetEventsData, EventsControllerGetEventsResponse, EventsControllerGetEventsError, EventsControllerAddEventData, EventsControllerAddEventResponse, EventsControllerAddEventError, EventsControllerDeleteEventData, EventsControllerDeleteEventResponse, EventsControllerDeleteEventError, EventsControllerGetOneEventData, EventsControllerGetOneEventResponse, EventsControllerGetOneEventError, EventsControllerUpdateEventData, EventsControllerUpdateEventResponse, EventsControllerUpdateEventError, NewsControllerGetNewsData, NewsControllerGetNewsResponse, NewsControllerGetNewsError, NewsControllerAddNewsData, NewsControllerAddNewsResponse, NewsControllerAddNewsError, NewsControllerDeleteNewsData, NewsControllerDeleteNewsResponse, NewsControllerDeleteNewsError, NewsControllerGetOneNewsData, NewsControllerGetOneNewsResponse, NewsControllerGetOneNewsError, NewsControllerUpdateNewsData, NewsControllerUpdateNewsResponse, NewsControllerUpdateNewsError, OpportunityControllerGetOpportunitiesData, OpportunityControllerGetOpportunitiesResponse, OpportunityControllerGetOpportunitiesError, OpportunityControllerAddOpportutnityData, OpportunityControllerAddOpportutnityResponse, OpportunityControllerAddOpportutnityError, OpportunityControllerDeleteOpportunityData, OpportunityControllerDeleteOpportunityResponse, OpportunityControllerDeleteOpportunityError, OpportunityControllerGetOneOpportunityData, OpportunityControllerGetOneOpportunityResponse, OpportunityControllerGetOneOpportunityError, OpportunityControllerUpdateOpportunityData, OpportunityControllerUpdateOpportunityResponse, OpportunityControllerUpdateOpportunityError, AnalyticsControllerGetAdminAnalyticsData, AnalyticsControllerGetAdminAnalyticsResponse } from './types.gen';
import { client as _heyApiClient } from './client.gen';

export type Options<TData extends TDataShape = TDataShape, ThrowOnError extends boolean = boolean> = ClientOptions<TData, ThrowOnError> & {
    /**
     * You can provide a client instance returned by `createClient()` instead of
     * individual options. This might be also useful if you want to implement a
     * custom client.
     */
    client?: Client;
    /**
     * You can pass arbitrary values through the `meta` object. This can be
     * used to access values that aren't defined as part of the SDK function.
     */
    meta?: Record<string, unknown>;
};

export const appControllerGetHello = <ThrowOnError extends boolean = false>(options?: Options<AppControllerGetHelloData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<unknown, unknown, ThrowOnError>({
        url: '/api/v1',
        ...options
    });
};

/**
 * Get user me API
 */
export const userControllerGetMyProfile = <ThrowOnError extends boolean = false>(options?: Options<UserControllerGetMyProfileData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<UserControllerGetMyProfileResponse, UserControllerGetMyProfileError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/users/me',
        ...options
    });
};

/**
 * Get users as a list API
 */
export const userControllerGetUsers = <ThrowOnError extends boolean = false>(options?: Options<UserControllerGetUsersData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<UserControllerGetUsersResponse, UserControllerGetUsersError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/users',
        ...options
    });
};

/**
 * Get user by id API
 */
export const userControllerGetUser = <ThrowOnError extends boolean = false>(options: Options<UserControllerGetUserData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<UserControllerGetUserResponse, UserControllerGetUserError, ThrowOnError>({
        url: '/api/v1/users/{id}',
        ...options
    });
};

/**
 * Update user API
 */
export const userControllerUpdateUser = <ThrowOnError extends boolean = false>(options: Options<UserControllerUpdateUserData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<UserControllerUpdateUserResponse, UserControllerUpdateUserError, ThrowOnError>({
        url: '/api/v1/users/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * User login API
 */
export const authControllerLogin = <ThrowOnError extends boolean = false>(options: Options<AuthControllerLoginData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<AuthControllerLoginResponse, AuthControllerLoginError, ThrowOnError>({
        url: '/api/v1/auth/login',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * User registration API
 */
export const authControllerRegisterLocal = <ThrowOnError extends boolean = false>(options: Options<AuthControllerRegisterLocalData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<AuthControllerRegisterLocalResponse, unknown, ThrowOnError>({
        url: '/api/v1/auth/register',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Refresh access token API
 */
export const authControllerRefreshToken = <ThrowOnError extends boolean = false>(options: Options<AuthControllerRefreshTokenData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<AuthControllerRefreshTokenResponse, AuthControllerRefreshTokenError, ThrowOnError>({
        url: '/api/v1/auth/refresh-token',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Get organizations API
 */
export const organizationControllerGetOrgs = <ThrowOnError extends boolean = false>(options: Options<OrganizationControllerGetOrgsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<OrganizationControllerGetOrgsResponse, OrganizationControllerGetOrgsError, ThrowOnError>({
        url: '/api/v1/organizations',
        ...options
    });
};

/**
 * Add organizations API
 */
export const organizationControllerAddOrg = <ThrowOnError extends boolean = false>(options: Options<OrganizationControllerAddOrgData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<OrganizationControllerAddOrgResponse, OrganizationControllerAddOrgError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/organizations',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Delete one organizations API
 */
export const organizationControllerDeleteOrganization = <ThrowOnError extends boolean = false>(options: Options<OrganizationControllerDeleteOrganizationData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<OrganizationControllerDeleteOrganizationResponse, OrganizationControllerDeleteOrganizationError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/organizations/{id}',
        ...options
    });
};

/**
 * Get one organizations API
 */
export const organizationControllerGetOneOrganization = <ThrowOnError extends boolean = false>(options: Options<OrganizationControllerGetOneOrganizationData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<OrganizationControllerGetOneOrganizationResponse, OrganizationControllerGetOneOrganizationError, ThrowOnError>({
        url: '/api/v1/organizations/{id}',
        ...options
    });
};

/**
 * Update one organizations API
 */
export const organizationControllerUpdateOrganization = <ThrowOnError extends boolean = false>(options: Options<OrganizationControllerUpdateOrganizationData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<OrganizationControllerUpdateOrganizationResponse, OrganizationControllerUpdateOrganizationError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/organizations/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Get tags API
 */
export const tagControllerGetTags = <ThrowOnError extends boolean = false>(options?: Options<TagControllerGetTagsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<TagControllerGetTagsResponse, TagControllerGetTagsError, ThrowOnError>({
        url: '/api/v1/tags',
        ...options
    });
};

/**
 * Add a new tag
 */
export const tagControllerAddTag = <ThrowOnError extends boolean = false>(options: Options<TagControllerAddTagData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<TagControllerAddTagResponse, TagControllerAddTagError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/tags',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Get tags by type API
 */
export const tagControllerGetTagsType = <ThrowOnError extends boolean = false>(options: Options<TagControllerGetTagsTypeData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<TagControllerGetTagsTypeResponse, TagControllerGetTagsTypeError, ThrowOnError>({
        url: '/api/v1/tags/{type}',
        ...options
    });
};

/**
 * Get imagekit auth params
 */
export const imagekitControllerGetAuthParamas = <ThrowOnError extends boolean = false>(options?: Options<ImagekitControllerGetAuthParamasData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<ImagekitControllerGetAuthParamasResponse, ImagekitControllerGetAuthParamasError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/imagekit',
        ...options
    });
};

/**
 * Get events API
 */
export const eventsControllerGetEvents = <ThrowOnError extends boolean = false>(options: Options<EventsControllerGetEventsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<EventsControllerGetEventsResponse, EventsControllerGetEventsError, ThrowOnError>({
        url: '/api/v1/events',
        ...options
    });
};

/**
 * Add events API
 */
export const eventsControllerAddEvent = <ThrowOnError extends boolean = false>(options: Options<EventsControllerAddEventData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<EventsControllerAddEventResponse, EventsControllerAddEventError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/events',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Delete one events API
 */
export const eventsControllerDeleteEvent = <ThrowOnError extends boolean = false>(options: Options<EventsControllerDeleteEventData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<EventsControllerDeleteEventResponse, EventsControllerDeleteEventError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/events/{id}',
        ...options
    });
};

/**
 * Get one events API
 */
export const eventsControllerGetOneEvent = <ThrowOnError extends boolean = false>(options: Options<EventsControllerGetOneEventData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<EventsControllerGetOneEventResponse, EventsControllerGetOneEventError, ThrowOnError>({
        url: '/api/v1/events/{id}',
        ...options
    });
};

/**
 * Update one events API
 */
export const eventsControllerUpdateEvent = <ThrowOnError extends boolean = false>(options: Options<EventsControllerUpdateEventData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<EventsControllerUpdateEventResponse, EventsControllerUpdateEventError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/events/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Get news API
 */
export const newsControllerGetNews = <ThrowOnError extends boolean = false>(options?: Options<NewsControllerGetNewsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<NewsControllerGetNewsResponse, NewsControllerGetNewsError, ThrowOnError>({
        url: '/api/v1/news',
        ...options
    });
};

/**
 * Add news API
 */
export const newsControllerAddNews = <ThrowOnError extends boolean = false>(options: Options<NewsControllerAddNewsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<NewsControllerAddNewsResponse, NewsControllerAddNewsError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/news',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Delete one news item API
 */
export const newsControllerDeleteNews = <ThrowOnError extends boolean = false>(options: Options<NewsControllerDeleteNewsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<NewsControllerDeleteNewsResponse, NewsControllerDeleteNewsError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/news/{id}',
        ...options
    });
};

/**
 * Get one news item API
 */
export const newsControllerGetOneNews = <ThrowOnError extends boolean = false>(options: Options<NewsControllerGetOneNewsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<NewsControllerGetOneNewsResponse, NewsControllerGetOneNewsError, ThrowOnError>({
        url: '/api/v1/news/{id}',
        ...options
    });
};

/**
 * Update one news item API
 */
export const newsControllerUpdateNews = <ThrowOnError extends boolean = false>(options: Options<NewsControllerUpdateNewsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<NewsControllerUpdateNewsResponse, NewsControllerUpdateNewsError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/news/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Get opportunities API
 */
export const opportunityControllerGetOpportunities = <ThrowOnError extends boolean = false>(options: Options<OpportunityControllerGetOpportunitiesData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<OpportunityControllerGetOpportunitiesResponse, OpportunityControllerGetOpportunitiesError, ThrowOnError>({
        url: '/api/v1/opportunities',
        ...options
    });
};

/**
 * Add opportunity API
 */
export const opportunityControllerAddOpportutnity = <ThrowOnError extends boolean = false>(options: Options<OpportunityControllerAddOpportutnityData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<OpportunityControllerAddOpportutnityResponse, OpportunityControllerAddOpportutnityError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/opportunities',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Delete one opportunity API
 */
export const opportunityControllerDeleteOpportunity = <ThrowOnError extends boolean = false>(options: Options<OpportunityControllerDeleteOpportunityData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<OpportunityControllerDeleteOpportunityResponse, OpportunityControllerDeleteOpportunityError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/opportunities/{id}',
        ...options
    });
};

/**
 * Get one opportunity API
 */
export const opportunityControllerGetOneOpportunity = <ThrowOnError extends boolean = false>(options: Options<OpportunityControllerGetOneOpportunityData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<OpportunityControllerGetOneOpportunityResponse, OpportunityControllerGetOneOpportunityError, ThrowOnError>({
        url: '/api/v1/opportunities/{id}',
        ...options
    });
};

/**
 * Update one opportunity API
 */
export const opportunityControllerUpdateOpportunity = <ThrowOnError extends boolean = false>(options: Options<OpportunityControllerUpdateOpportunityData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<OpportunityControllerUpdateOpportunityResponse, OpportunityControllerUpdateOpportunityError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/opportunities/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Get admin dashboard data
 */
export const analyticsControllerGetAdminAnalytics = <ThrowOnError extends boolean = false>(options?: Options<AnalyticsControllerGetAdminAnalyticsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<AnalyticsControllerGetAdminAnalyticsResponse, unknown, ThrowOnError>({
        url: '/api/v1/analytics/admin-dashboard',
        ...options
    });
};