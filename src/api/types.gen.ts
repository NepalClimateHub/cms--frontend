// This file is auto-generated by @hey-api/openapi-ts

export type UserOutput = {
    id: string;
    email: string;
    fullName: string;
    isSuperAdmin: boolean;
    isAccountVerified: boolean;
    userType: 'ADMIN' | 'ORGANIZATION' | 'INDIVIDUAL';
    gender: {
        [key: string]: unknown;
    };
    phoneCountryCode: {
        [key: string]: unknown;
    };
    phoneNumber: {
        [key: string]: unknown;
    };
    createdAt: string;
    updatedAt: string;
};

export type ResponseMetadata = {
    count?: {
        [key: string]: unknown;
    };
    additionalInfo?: {
        [key: string]: unknown;
    };
};

export type UserApiResponse = {
    data: UserOutput;
    meta: ResponseMetadata;
};

export type BaseApiErrorObject = {
    statusCode: number;
    message: string;
    localizedMessage?: string;
    errorName: string;
    details: {
        [key: string]: unknown;
    };
    path: string;
    requestId: string;
    timestamp: string;
};

export type BaseApiErrorResponse = {
    error: BaseApiErrorObject;
};

export type UserArrayApiResponse = {
    data: Array<UserOutput>;
    meta: ResponseMetadata;
};

export type UpdateUserInput = {
    name?: string;
    password?: string;
};

export type LoginInput = {
    email: string;
    password: string;
};

export type AuthTokenOutput = {
    accessToken: string;
    refreshToken: string;
};

export type AuthTokenApiResponse = {
    data: AuthTokenOutput;
    meta: ResponseMetadata;
};

export type RegisterInput = {
    name: string;
    username: string;
    password: string;
    email: string;
    userType: 'ADMIN' | 'ORGANIZATION' | 'INDIVIDUAL';
};

export type RegisterOutput = {
    id: number;
    name: string;
    username: string;
    roles: Array<string>;
    email: string;
    isAccountDisabled: boolean;
    userType: 'ADMIN' | 'ORGANIZATION' | 'INDIVIDUAL';
    createdAt: string;
    updatedAt: string;
};

export type RegisterApiResponse = {
    data: RegisterOutput;
    meta: ResponseMetadata;
};

export type RefreshTokenInput = {
    refreshToken: string;
};

export type AddressResponse = {
    /**
     * Street
     */
    street?: string;
    /**
     * Street
     */
    country?: string;
    /**
     * Street
     */
    city?: string;
    /**
     * Street
     */
    state?: string;
    /**
     * Street
     */
    postcode?: string;
};

export type OrganizationResponseDto = {
    /**
     * Organization id
     */
    id: string;
    /**
     * Organization name
     */
    name: string;
    /**
     * Organization description
     */
    description: string;
    /**
     * Organization email
     */
    email: string;
    /**
     * Phone country code
     */
    phoneCountryCode?: string;
    /**
     * Phone number
     */
    phoneNumber?: string;
    /**
     * Address
     */
    address?: AddressResponse;
    /**
     * Object of Socials
     */
    socials?: {
        [key: string]: unknown;
    };
    /**
     * Banner image URL
     */
    bannerImageUrl?: string;
    /**
     * Banner image ID
     */
    bannerImageId?: string;
    /**
     * Logo image URL
     */
    logoImageUrl: string;
    /**
     * Logo image ID
     */
    logoImageId?: string;
    /**
     * Tags IDs
     */
    tags?: Array<string>;
    /**
     * Gallery
     */
    organizationGallery?: Array<string>;
};

export type OrganizationArrayApiResponse = {
    data: Array<OrganizationResponseDto>;
    meta: ResponseMetadata;
};

export type AddressInput = {
    /**
     * Street
     */
    street?: string;
    /**
     * Country
     */
    country?: string;
    /**
     * City
     */
    city?: string;
    /**
     * State
     */
    state?: string;
    /**
     * Postcode
     */
    postcode?: string;
};

export type CreateOrganizationDto = {
    /**
     * Organization name
     */
    name: string;
    /**
     * Organization description
     */
    description: string;
    /**
     * Organization email
     */
    email: string;
    /**
     * Phone country code
     */
    phoneCountryCode?: string;
    /**
     * Phone number
     */
    phoneNumber?: string;
    /**
     * Address
     */
    address?: AddressInput;
    /**
     * Gallery iamges
     */
    gallery?: Array<string>;
    /**
     * Object of Socials
     */
    socials?: {
        [key: string]: unknown;
    };
    /**
     * Banner image URL
     */
    bannerImageUrl?: string;
    /**
     * Banner image ID
     */
    bannerImageId?: string;
    /**
     * Logo image URL
     */
    logoImageUrl: string;
    /**
     * Logo image ID
     */
    logoImageId?: string;
    /**
     * Tags IDs
     */
    tagIds?: Array<string>;
};

export type OrganizationApiResponse = {
    data: OrganizationResponseDto;
    meta: ResponseMetadata;
};

export type UpdateOrganizationDto = {
    /**
     * Organization name
     */
    name: string;
    /**
     * Organization description
     */
    description: string;
    /**
     * Organization email
     */
    email: string;
    /**
     * Phone country code
     */
    phoneCountryCode?: string;
    /**
     * Phone number
     */
    phoneNumber?: string;
    /**
     * Address
     */
    address?: AddressInput;
    /**
     * Gallery iamges
     */
    gallery?: Array<string>;
    /**
     * Object of Socials
     */
    socials?: {
        [key: string]: unknown;
    };
    /**
     * Banner image URL
     */
    bannerImageUrl?: string;
    /**
     * Banner image ID
     */
    bannerImageId?: string;
    /**
     * Logo image URL
     */
    logoImageUrl: string;
    /**
     * Logo image ID
     */
    logoImageId?: string;
    /**
     * Tags IDs
     */
    tagIds?: Array<string>;
};

export type TagOutputDto = {
    [key: string]: unknown;
};

export type TagArrayApiResponse = {
    data: Array<TagOutputDto>;
    meta: ResponseMetadata;
};

export type AddTagDto = {
    /**
     * The name of the tag
     */
    tag: string;
    /**
     * Indicates if this is a user tag
     */
    isUserTag?: boolean;
    /**
     * Indicates if this is an organization tag
     */
    isOrganizationTag?: boolean;
    /**
     * Indicates if this is an event tag
     */
    isEventTag?: boolean;
    /**
     * Indicates if this is a news tag
     */
    isNewsTag?: boolean;
    /**
     * Indicates if this is a blog tag
     */
    isBlogTag?: boolean;
    /**
     * Indicates if this is an opportunity tag
     */
    isOpportunityTag?: boolean;
};

export type TagApiResponse = {
    data: TagOutputDto;
    meta: ResponseMetadata;
};

export type ImagekitAuthParams = {
    /**
     * Imagekit token
     */
    token: string;
    /**
     * Imagekit token expiry
     */
    expire: number;
    /**
     * Imagekit auth sinature
     */
    signature: string;
};

export type ImagekitResponseDto = {
    /**
     * Imagekit auth
     */
    ikAuthParams: ImagekitAuthParams;
    /**
     * Imagekit pub key
     */
    publicKey: string;
    /**
     * Imagekit endpoint
     */
    endpoint: string;
    /**
     * Upload folder
     */
    folder: string;
};

export type ImagekitApiResponse = {
    data: ImagekitResponseDto;
    meta: ResponseMetadata;
};

export type EventResponseDto = {
    /**
     * Event id
     */
    id: string;
    /**
     * Event name
     */
    title: string;
    /**
     * organizer
     */
    organizer: string;
    /**
     * Event description
     */
    description: string;
    /**
     * location
     */
    location: string;
    /**
     * location type
     */
    locationType: string;
    /**
     * event type
     */
    type: string;
    /**
     * event type
     */
    format: string;
    /**
     * event website
     */
    website: string;
    /**
     * Contributed by
     */
    contributedBy: string;
    /**
     * date
     */
    startDate?: string;
    /**
     * date
     */
    registrationDeadline?: string;
    /**
     * link
     */
    registrationLink?: string;
    /**
     * email contact
     */
    contactEmail?: string;
    /**
     * status
     */
    status?: string;
    /**
     * cost
     */
    cost?: string;
    /**
     * Banner image URL
     */
    bannerImageUrl?: string;
    /**
     * Banner image ID
     */
    bannerImageId?: string;
    /**
     * Address
     */
    address?: AddressResponse;
    /**
     * Object of Socials
     */
    socials?: {
        [key: string]: unknown;
    };
    /**
     * Tags IDs
     */
    tags?: Array<string>;
    /**
     * Gallery
     */
    eventGallery?: Array<string>;
    /**
     * Draft status
     */
    isDraft: boolean;
};

export type EventArrayApiResponse = {
    data: Array<EventResponseDto>;
    meta: ResponseMetadata;
};

export type CreateEventDto = {
    /**
     * Event name
     */
    title: string;
    /**
     * organizer
     */
    organizer: string;
    /**
     * Event description
     */
    description: string;
    /**
     * location
     */
    location: string;
    /**
     * location type
     */
    locationType: string;
    /**
     * event type
     */
    type: string;
    /**
     * event type
     */
    format: string;
    /**
     * date
     */
    startDate?: string;
    /**
     * date
     */
    registrationDeadline?: string;
    /**
     * link
     */
    registrationLink?: string;
    /**
     * email contact
     */
    contactEmail?: string;
    /**
     * status
     */
    status?: string;
    /**
     * cost
     */
    cost?: string;
    /**
     * Address
     */
    address?: AddressInput;
    /**
     * Gallery iamges
     */
    gallery?: Array<string>;
    /**
     * website
     */
    website?: string;
    /**
     * Object of Socials
     */
    socials?: {
        [key: string]: unknown;
    };
    /**
     * Banner image URL
     */
    bannerImageUrl?: string;
    /**
     * Banner image ID
     */
    bannerImageId?: string;
    /**
     * Tags IDs
     */
    tagIds?: Array<string>;
};

export type EventApiResponse = {
    data: EventResponseDto;
    meta: ResponseMetadata;
};

export type UpdateEventDto = {
    /**
     * Event name
     */
    title: string;
    /**
     * organizer
     */
    organizer: string;
    /**
     * Event description
     */
    description: string;
    /**
     * location
     */
    location: string;
    /**
     * location type
     */
    locationType: string;
    /**
     * event type
     */
    type: string;
    /**
     * event type
     */
    format: string;
    /**
     * website
     */
    website?: string;
    /**
     * date
     */
    startDate?: string;
    /**
     * date
     */
    registrationDeadline?: string;
    /**
     * link
     */
    registrationLink?: string;
    /**
     * email contact
     */
    contactEmail?: string;
    /**
     * status
     */
    status?: string;
    /**
     * cost
     */
    cost?: string;
    /**
     * Address
     */
    address?: AddressInput;
    /**
     * Gallery iamges
     */
    gallery?: Array<string>;
    /**
     * Object of Socials
     */
    socials?: {
        [key: string]: unknown;
    };
    /**
     * Banner image URL
     */
    bannerImageUrl?: string;
    /**
     * Banner image ID
     */
    bannerImageId?: string;
    /**
     * Tags IDs
     */
    tagIds?: Array<string>;
    /**
     * Event status
     */
    isDraft: boolean;
};

export type ApiResponseOfNewsResponseDtoArray = {
    meta: {
        [key: string]: unknown;
    };
    data: Array<NewsResponseDto>;
};

export type CreateNewsDto = {
    /**
     * News title
     */
    title: string;
    /**
     * News source
     */
    source: string;
    /**
     * News mode
     */
    mode: string;
    /**
     * Published date
     */
    publishedDate: string;
    /**
     * News link
     */
    newsLink: string;
    /**
     * Banner image URL
     */
    bannerImageUrl: string;
    /**
     * Banner image ID
     */
    bannerImageId?: string;
    /**
     * Tags IDs
     */
    tagIds?: Array<string>;
};

export type NewsResponseDto = {
    /**
     * News ID
     */
    id: string;
    /**
     * News title
     */
    title: string;
    /**
     * News source
     */
    source: string;
    /**
     * News mode
     */
    mode: string;
    /**
     * Published date
     */
    publishedDate: string;
    /**
     * Published year
     */
    publishedYear: string;
    /**
     * News link
     */
    newsLink: string;
    /**
     * Banner image URL
     */
    bannerImageUrl: string;
    /**
     * Banner image ID
     */
    bannerImageId?: string;
    /**
     * Tags IDs
     */
    tags?: Array<string>;
    /**
     * Contributed by
     */
    contributedBy: string;
    /**
     * Created at
     */
    createdAt: string;
    /**
     * Updated at
     */
    updatedAt: string;
    /**
     * Deleted at
     */
    deletedAt?: string;
    /**
     * isDraft
     */
    isDraft: boolean;
};

export type ApiResponseOfNewsResponseDto = {
    meta: {
        [key: string]: unknown;
    };
    data: NewsResponseDto;
};

export type UpdateNewsDto = {
    /**
     * News title
     */
    title: string;
    /**
     * News source
     */
    source: string;
    /**
     * News mode
     */
    mode: string;
    /**
     * Published date
     */
    publishedDate?: string;
    /**
     * Published year
     */
    publishedYear?: string;
    /**
     * News link
     */
    newsLink: string;
    /**
     * Banner image URL
     */
    bannerImageUrl: string;
    /**
     * Banner image ID
     */
    bannerImageId?: string;
    /**
     * Tags IDs
     */
    tagIds?: Array<string>;
    /**
     * isDraft
     */
    isDraft: boolean;
};

export type OpportunityResponseDto = {
    /**
     * Opportunity ID
     */
    id: string;
    /**
     * Opportunity name
     */
    title: string;
    /**
     * organizer
     */
    organizer: string;
    /**
     * Opportunity description
     */
    description: string;
    /**
     * location
     */
    location: string;
    /**
     * location type
     */
    locationType: string;
    /**
     * Opportunity type
     */
    type: string;
    /**
     * Opportunity type
     */
    format: string;
    /**
     * duration
     */
    duration?: string;
    /**
     * date
     */
    applicationDeadline?: string;
    /**
     * email contact
     */
    contactEmail?: string;
    /**
     * status
     */
    status?: string;
    /**
     * cost
     */
    cost?: string;
    /**
     * Banner image URL
     */
    bannerImageUrl?: string;
    /**
     * Banner image ID
     */
    bannerImageId?: string;
    /**
     * Address
     */
    address?: AddressResponse;
    /**
     * Object of Socials
     */
    socials?: {
        [key: string]: unknown;
    };
    /**
     * Tags IDs
     */
    tags?: Array<string>;
    /**
     * Gallery
     */
    OpportunityGallery?: Array<string>;
    /**
     * isDraft
     */
    isDraft?: boolean;
    /**
     * Website URL
     */
    websiteUrl: string;
};

export type OpportunityArrayApiResponse = {
    data: Array<OpportunityResponseDto>;
    meta: ResponseMetadata;
};

export type CreateOpportunityDto = {
    /**
     * Opportunity name
     */
    title: string;
    /**
     * Opportunity description
     */
    description: string;
    /**
     * location
     */
    location: string;
    /**
     * location type
     */
    locationType: string;
    /**
     * Opportunity type
     */
    type: string;
    /**
     * opportunity format
     */
    format: string;
    /**
     * Website URL
     */
    websiteUrl: string;
    /**
     * date
     */
    applicationDeadline?: string;
    /**
     * duration
     */
    duration?: string;
    /**
     * email contact
     */
    contactEmail?: string;
    /**
     * status
     */
    status?: string;
    /**
     * cost
     */
    cost?: string;
    /**
     * organizer
     */
    organizer: string;
    /**
     * Address
     */
    address?: AddressInput;
    /**
     * Object of Socials
     */
    socials?: {
        [key: string]: unknown;
    };
    /**
     * Banner image URL
     */
    bannerImageUrl?: string;
    /**
     * Banner image ID
     */
    bannerImageId?: string;
    /**
     * Tags IDs
     */
    tagIds?: Array<string>;
};

export type OpportunityApiResponse = {
    data: OpportunityResponseDto;
    meta: ResponseMetadata;
};

export type UpdateOpportunityDto = {
    /**
     * Opportunity name
     */
    title: string;
    /**
     * organizer
     */
    organizer: string;
    /**
     * Opportunity description
     */
    description: string;
    /**
     * location
     */
    location: string;
    /**
     * location type
     */
    locationType: string;
    /**
     * Opportunity type
     */
    type: string;
    /**
     * Opportunity type
     */
    format: string;
    /**
     * date
     */
    applicationDeadline?: string;
    /**
     * email contact
     */
    contactEmail?: string;
    /**
     * status
     */
    status?: string;
    /**
     * cost
     */
    cost?: string;
    /**
     * Address
     */
    address?: AddressInput;
    /**
     * Object of Socials
     */
    socials?: {
        [key: string]: unknown;
    };
    /**
     * Banner image URL
     */
    bannerImageUrl?: string;
    /**
     * Banner image ID
     */
    bannerImageId?: string;
    /**
     * Tags IDs
     */
    tagIds?: Array<string>;
    /**
     * isDraft
     */
    isDraft?: boolean;
};

export type AdminAnalyticsOutput = {
    newsCount: number;
    userCount: string;
    eventCount: string;
    opportunityCount: string;
    blogCount: string;
};

export type ApiResponseOfAdminAnalyticsOutput = {
    meta: {
        [key: string]: unknown;
    };
    data: AdminAnalyticsOutput;
};

export type CreateBlogDto = {
    /**
     * Blog title
     */
    title: string;
    /**
     * Blog content
     */
    content: string;
    /**
     * Blog excerpt
     */
    excerpt?: string;
    /**
     * Blog author
     */
    author: string;
    /**
     * Blog category
     */
    category: string;
    /**
     * Estimated reading time
     */
    readingTime?: string;
    /**
     * Published date
     */
    publishedDate?: string;
    /**
     * Is draft
     */
    isDraft?: boolean;
    /**
     * Is featured
     */
    isFeatured?: boolean;
    /**
     * Banner image URL
     */
    bannerImageUrl?: string;
    /**
     * Banner image ID
     */
    bannerImageId?: string;
    /**
     * Tags IDs
     */
    tagIds?: Array<string>;
};

export type BlogResponseDto = {
    /**
     * Blog ID
     */
    id: string;
    /**
     * Blog title
     */
    title: string;
    /**
     * Blog content
     */
    content: string;
    /**
     * Blog excerpt
     */
    excerpt?: string;
    /**
     * Blog author
     */
    author: string;
    /**
     * Blog category
     */
    category: string;
    /**
     * Estimated reading time
     */
    readingTime?: string;
    /**
     * Published date
     */
    publishedDate?: string;
    /**
     * Is draft
     */
    isDraft: boolean;
    /**
     * Is featured
     */
    isFeatured: boolean;
    /**
     * Banner image URL
     */
    bannerImageUrl?: string;
    /**
     * Banner image ID
     */
    bannerImageId?: string;
    /**
     * Tags
     */
    tags?: Array<TagOutputDto>;
    /**
     * Contributed by
     */
    contributedBy: string;
    /**
     * Created at
     */
    createdAt: string;
    /**
     * Updated at
     */
    updatedAt: string;
    /**
     * Deleted at
     */
    deletedAt?: string;
};

export type BlogApiResponse = {
    data: BlogResponseDto;
    meta: ResponseMetadata;
};

export type BlogArrayApiResponse = {
    data: Array<BlogResponseDto>;
    meta: ResponseMetadata;
};

export type UpdateBlogDto = {
    /**
     * Blog title
     */
    title?: string;
    /**
     * Blog content
     */
    content?: string;
    /**
     * Blog excerpt
     */
    excerpt?: string;
    /**
     * Blog author
     */
    author?: string;
    /**
     * Blog category
     */
    category?: string;
    /**
     * Estimated reading time
     */
    readingTime?: string;
    /**
     * Published date
     */
    publishedDate?: string;
    /**
     * Is draft
     */
    isDraft?: boolean;
    /**
     * Is featured
     */
    isFeatured?: boolean;
    /**
     * Banner image URL
     */
    bannerImageUrl?: string;
    /**
     * Banner image ID
     */
    bannerImageId?: string;
    /**
     * Tags IDs
     */
    tagIds?: Array<string>;
};

export type AppControllerGetHelloData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/v1';
};

export type AppControllerGetHelloResponses = {
    200: unknown;
};

export type UserControllerGetMyProfileData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/v1/users/me';
};

export type UserControllerGetMyProfileErrors = {
    401: BaseApiErrorResponse;
};

export type UserControllerGetMyProfileError = UserControllerGetMyProfileErrors[keyof UserControllerGetMyProfileErrors];

export type UserControllerGetMyProfileResponses = {
    200: UserApiResponse;
};

export type UserControllerGetMyProfileResponse = UserControllerGetMyProfileResponses[keyof UserControllerGetMyProfileResponses];

export type UserControllerGetUsersData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * Optional, defaults to 100
         */
        limit?: number;
        /**
         * Optional, defaults to 0
         */
        offset?: number;
    };
    url: '/api/v1/users';
};

export type UserControllerGetUsersErrors = {
    401: BaseApiErrorResponse;
};

export type UserControllerGetUsersError = UserControllerGetUsersErrors[keyof UserControllerGetUsersErrors];

export type UserControllerGetUsersResponses = {
    200: UserArrayApiResponse;
};

export type UserControllerGetUsersResponse = UserControllerGetUsersResponses[keyof UserControllerGetUsersResponses];

export type UserControllerGetUserData = {
    body?: never;
    path: {
        id: number;
    };
    query?: never;
    url: '/api/v1/users/{id}';
};

export type UserControllerGetUserErrors = {
    404: BaseApiErrorResponse;
};

export type UserControllerGetUserError = UserControllerGetUserErrors[keyof UserControllerGetUserErrors];

export type UserControllerGetUserResponses = {
    200: UserApiResponse;
};

export type UserControllerGetUserResponse = UserControllerGetUserResponses[keyof UserControllerGetUserResponses];

export type UserControllerUpdateUserData = {
    body: UpdateUserInput;
    path: {
        id: number;
    };
    query?: never;
    url: '/api/v1/users/{id}';
};

export type UserControllerUpdateUserErrors = {
    404: BaseApiErrorResponse;
};

export type UserControllerUpdateUserError = UserControllerUpdateUserErrors[keyof UserControllerUpdateUserErrors];

export type UserControllerUpdateUserResponses = {
    200: UserApiResponse;
};

export type UserControllerUpdateUserResponse = UserControllerUpdateUserResponses[keyof UserControllerUpdateUserResponses];

export type AuthControllerLoginData = {
    body: LoginInput;
    path?: never;
    query?: never;
    url: '/api/v1/auth/login';
};

export type AuthControllerLoginErrors = {
    401: BaseApiErrorResponse;
};

export type AuthControllerLoginError = AuthControllerLoginErrors[keyof AuthControllerLoginErrors];

export type AuthControllerLoginResponses = {
    200: AuthTokenApiResponse;
};

export type AuthControllerLoginResponse = AuthControllerLoginResponses[keyof AuthControllerLoginResponses];

export type AuthControllerRegisterLocalData = {
    body: RegisterInput;
    path?: never;
    query?: never;
    url: '/api/v1/auth/register';
};

export type AuthControllerRegisterLocalResponses = {
    201: RegisterApiResponse;
};

export type AuthControllerRegisterLocalResponse = AuthControllerRegisterLocalResponses[keyof AuthControllerRegisterLocalResponses];

export type AuthControllerRefreshTokenData = {
    body: RefreshTokenInput;
    path?: never;
    query?: never;
    url: '/api/v1/auth/refresh-token';
};

export type AuthControllerRefreshTokenErrors = {
    401: BaseApiErrorResponse;
};

export type AuthControllerRefreshTokenError = AuthControllerRefreshTokenErrors[keyof AuthControllerRefreshTokenErrors];

export type AuthControllerRefreshTokenResponses = {
    200: AuthTokenApiResponse;
};

export type AuthControllerRefreshTokenResponse = AuthControllerRefreshTokenResponses[keyof AuthControllerRefreshTokenResponses];

export type OrganizationControllerGetOrgsData = {
    body?: never;
    path?: never;
    query: {
        /**
         * Optional, defaults to 100
         */
        limit?: number;
        /**
         * Optional, defaults to 0
         */
        offset?: number;
        name: string;
        tagIds: Array<string>;
    };
    url: '/api/v1/organizations';
};

export type OrganizationControllerGetOrgsErrors = {
    401: BaseApiErrorResponse;
};

export type OrganizationControllerGetOrgsError = OrganizationControllerGetOrgsErrors[keyof OrganizationControllerGetOrgsErrors];

export type OrganizationControllerGetOrgsResponses = {
    200: OrganizationArrayApiResponse;
};

export type OrganizationControllerGetOrgsResponse = OrganizationControllerGetOrgsResponses[keyof OrganizationControllerGetOrgsResponses];

export type OrganizationControllerAddOrgData = {
    body: CreateOrganizationDto;
    path?: never;
    query?: never;
    url: '/api/v1/organizations';
};

export type OrganizationControllerAddOrgErrors = {
    401: BaseApiErrorResponse;
};

export type OrganizationControllerAddOrgError = OrganizationControllerAddOrgErrors[keyof OrganizationControllerAddOrgErrors];

export type OrganizationControllerAddOrgResponses = {
    200: OrganizationApiResponse;
};

export type OrganizationControllerAddOrgResponse = OrganizationControllerAddOrgResponses[keyof OrganizationControllerAddOrgResponses];

export type OrganizationControllerDeleteOrganizationData = {
    body?: never;
    path: {
        id: string;
    };
    query?: never;
    url: '/api/v1/organizations/{id}';
};

export type OrganizationControllerDeleteOrganizationErrors = {
    401: BaseApiErrorResponse;
};

export type OrganizationControllerDeleteOrganizationError = OrganizationControllerDeleteOrganizationErrors[keyof OrganizationControllerDeleteOrganizationErrors];

export type OrganizationControllerDeleteOrganizationResponses = {
    200: OrganizationApiResponse;
};

export type OrganizationControllerDeleteOrganizationResponse = OrganizationControllerDeleteOrganizationResponses[keyof OrganizationControllerDeleteOrganizationResponses];

export type OrganizationControllerGetOneOrganizationData = {
    body?: never;
    path: {
        id: string;
    };
    query?: never;
    url: '/api/v1/organizations/{id}';
};

export type OrganizationControllerGetOneOrganizationErrors = {
    401: BaseApiErrorResponse;
};

export type OrganizationControllerGetOneOrganizationError = OrganizationControllerGetOneOrganizationErrors[keyof OrganizationControllerGetOneOrganizationErrors];

export type OrganizationControllerGetOneOrganizationResponses = {
    200: OrganizationApiResponse;
};

export type OrganizationControllerGetOneOrganizationResponse = OrganizationControllerGetOneOrganizationResponses[keyof OrganizationControllerGetOneOrganizationResponses];

export type OrganizationControllerUpdateOrganizationData = {
    body: UpdateOrganizationDto;
    path: {
        id: string;
    };
    query?: never;
    url: '/api/v1/organizations/{id}';
};

export type OrganizationControllerUpdateOrganizationErrors = {
    401: BaseApiErrorResponse;
};

export type OrganizationControllerUpdateOrganizationError = OrganizationControllerUpdateOrganizationErrors[keyof OrganizationControllerUpdateOrganizationErrors];

export type OrganizationControllerUpdateOrganizationResponses = {
    200: OrganizationApiResponse;
};

export type OrganizationControllerUpdateOrganizationResponse = OrganizationControllerUpdateOrganizationResponses[keyof OrganizationControllerUpdateOrganizationResponses];

export type TagControllerGetTagsData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * Optional, defaults to 100
         */
        limit?: number;
        /**
         * Optional, defaults to 0
         */
        offset?: number;
        tag?: string;
        isUserTag?: boolean;
        isOrganizationTag?: boolean;
        isEventTag?: boolean;
        isNewsTag?: boolean;
        isOpportunityTag?: boolean;
    };
    url: '/api/v1/tags';
};

export type TagControllerGetTagsErrors = {
    401: BaseApiErrorResponse;
};

export type TagControllerGetTagsError = TagControllerGetTagsErrors[keyof TagControllerGetTagsErrors];

export type TagControllerGetTagsResponses = {
    200: TagArrayApiResponse;
};

export type TagControllerGetTagsResponse = TagControllerGetTagsResponses[keyof TagControllerGetTagsResponses];

export type TagControllerAddTagData = {
    body: AddTagDto;
    path?: never;
    query?: never;
    url: '/api/v1/tags';
};

export type TagControllerAddTagErrors = {
    401: BaseApiErrorResponse;
};

export type TagControllerAddTagError = TagControllerAddTagErrors[keyof TagControllerAddTagErrors];

export type TagControllerAddTagResponses = {
    200: TagApiResponse;
};

export type TagControllerAddTagResponse = TagControllerAddTagResponses[keyof TagControllerAddTagResponses];

export type TagControllerGetTagsTypeData = {
    body?: never;
    path: {
        type: string;
    };
    query?: never;
    url: '/api/v1/tags/{type}';
};

export type TagControllerGetTagsTypeErrors = {
    401: BaseApiErrorResponse;
};

export type TagControllerGetTagsTypeError = TagControllerGetTagsTypeErrors[keyof TagControllerGetTagsTypeErrors];

export type TagControllerGetTagsTypeResponses = {
    200: TagArrayApiResponse;
};

export type TagControllerGetTagsTypeResponse = TagControllerGetTagsTypeResponses[keyof TagControllerGetTagsTypeResponses];

export type TagControllerDeleteTagData = {
    body?: never;
    path: {
        id: string;
    };
    query?: never;
    url: '/api/v1/tags/{id}';
};

export type TagControllerDeleteTagErrors = {
    401: BaseApiErrorResponse;
};

export type TagControllerDeleteTagError = TagControllerDeleteTagErrors[keyof TagControllerDeleteTagErrors];

export type TagControllerDeleteTagResponses = {
    200: TagApiResponse;
};

export type TagControllerDeleteTagResponse = TagControllerDeleteTagResponses[keyof TagControllerDeleteTagResponses];

export type ImagekitControllerGetAuthParamasData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/v1/imagekit';
};

export type ImagekitControllerGetAuthParamasErrors = {
    401: BaseApiErrorResponse;
};

export type ImagekitControllerGetAuthParamasError = ImagekitControllerGetAuthParamasErrors[keyof ImagekitControllerGetAuthParamasErrors];

export type ImagekitControllerGetAuthParamasResponses = {
    200: ImagekitApiResponse;
};

export type ImagekitControllerGetAuthParamasResponse = ImagekitControllerGetAuthParamasResponses[keyof ImagekitControllerGetAuthParamasResponses];

export type EventsControllerGetEventsData = {
    body?: never;
    path?: never;
    query: {
        /**
         * Optional, defaults to 100
         */
        limit?: number;
        /**
         * Optional, defaults to 0
         */
        offset?: number;
        title: string;
        tagIds?: Array<string>;
    };
    url: '/api/v1/events';
};

export type EventsControllerGetEventsErrors = {
    401: BaseApiErrorResponse;
};

export type EventsControllerGetEventsError = EventsControllerGetEventsErrors[keyof EventsControllerGetEventsErrors];

export type EventsControllerGetEventsResponses = {
    200: EventArrayApiResponse;
};

export type EventsControllerGetEventsResponse = EventsControllerGetEventsResponses[keyof EventsControllerGetEventsResponses];

export type EventsControllerAddEventData = {
    body: CreateEventDto;
    path?: never;
    query?: never;
    url: '/api/v1/events';
};

export type EventsControllerAddEventErrors = {
    401: BaseApiErrorResponse;
};

export type EventsControllerAddEventError = EventsControllerAddEventErrors[keyof EventsControllerAddEventErrors];

export type EventsControllerAddEventResponses = {
    200: EventApiResponse;
};

export type EventsControllerAddEventResponse = EventsControllerAddEventResponses[keyof EventsControllerAddEventResponses];

export type EventsControllerDeleteEventData = {
    body?: never;
    path: {
        id: string;
    };
    query?: never;
    url: '/api/v1/events/{id}';
};

export type EventsControllerDeleteEventErrors = {
    401: BaseApiErrorResponse;
};

export type EventsControllerDeleteEventError = EventsControllerDeleteEventErrors[keyof EventsControllerDeleteEventErrors];

export type EventsControllerDeleteEventResponses = {
    200: EventApiResponse;
};

export type EventsControllerDeleteEventResponse = EventsControllerDeleteEventResponses[keyof EventsControllerDeleteEventResponses];

export type EventsControllerGetOneEventData = {
    body?: never;
    path: {
        id: string;
    };
    query?: never;
    url: '/api/v1/events/{id}';
};

export type EventsControllerGetOneEventErrors = {
    401: BaseApiErrorResponse;
};

export type EventsControllerGetOneEventError = EventsControllerGetOneEventErrors[keyof EventsControllerGetOneEventErrors];

export type EventsControllerGetOneEventResponses = {
    200: EventApiResponse;
};

export type EventsControllerGetOneEventResponse = EventsControllerGetOneEventResponses[keyof EventsControllerGetOneEventResponses];

export type EventsControllerUpdateEventData = {
    body: UpdateEventDto;
    path: {
        id: string;
    };
    query?: never;
    url: '/api/v1/events/{id}';
};

export type EventsControllerUpdateEventErrors = {
    401: BaseApiErrorResponse;
};

export type EventsControllerUpdateEventError = EventsControllerUpdateEventErrors[keyof EventsControllerUpdateEventErrors];

export type EventsControllerUpdateEventResponses = {
    200: EventApiResponse;
};

export type EventsControllerUpdateEventResponse = EventsControllerUpdateEventResponses[keyof EventsControllerUpdateEventResponses];

export type NewsControllerGetNewsData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * Optional, defaults to 100
         */
        limit?: number;
        /**
         * Optional, defaults to 0
         */
        offset?: number;
        title?: string;
        tagIds?: Array<string>;
    };
    url: '/api/v1/news';
};

export type NewsControllerGetNewsErrors = {
    401: BaseApiErrorResponse;
};

export type NewsControllerGetNewsError = NewsControllerGetNewsErrors[keyof NewsControllerGetNewsErrors];

export type NewsControllerGetNewsResponses = {
    200: ApiResponseOfNewsResponseDtoArray;
};

export type NewsControllerGetNewsResponse = NewsControllerGetNewsResponses[keyof NewsControllerGetNewsResponses];

export type NewsControllerAddNewsData = {
    body: CreateNewsDto;
    path?: never;
    query?: never;
    url: '/api/v1/news';
};

export type NewsControllerAddNewsErrors = {
    401: BaseApiErrorResponse;
};

export type NewsControllerAddNewsError = NewsControllerAddNewsErrors[keyof NewsControllerAddNewsErrors];

export type NewsControllerAddNewsResponses = {
    200: ApiResponseOfNewsResponseDto;
};

export type NewsControllerAddNewsResponse = NewsControllerAddNewsResponses[keyof NewsControllerAddNewsResponses];

export type NewsControllerDeleteNewsData = {
    body?: never;
    path: {
        id: string;
    };
    query?: never;
    url: '/api/v1/news/{id}';
};

export type NewsControllerDeleteNewsErrors = {
    401: BaseApiErrorResponse;
};

export type NewsControllerDeleteNewsError = NewsControllerDeleteNewsErrors[keyof NewsControllerDeleteNewsErrors];

export type NewsControllerDeleteNewsResponses = {
    200: ApiResponseOfNewsResponseDto;
};

export type NewsControllerDeleteNewsResponse = NewsControllerDeleteNewsResponses[keyof NewsControllerDeleteNewsResponses];

export type NewsControllerGetOneNewsData = {
    body?: never;
    path: {
        id: string;
    };
    query?: never;
    url: '/api/v1/news/{id}';
};

export type NewsControllerGetOneNewsErrors = {
    401: BaseApiErrorResponse;
};

export type NewsControllerGetOneNewsError = NewsControllerGetOneNewsErrors[keyof NewsControllerGetOneNewsErrors];

export type NewsControllerGetOneNewsResponses = {
    200: ApiResponseOfNewsResponseDto;
};

export type NewsControllerGetOneNewsResponse = NewsControllerGetOneNewsResponses[keyof NewsControllerGetOneNewsResponses];

export type NewsControllerUpdateNewsData = {
    body: UpdateNewsDto;
    path: {
        id: string;
    };
    query?: never;
    url: '/api/v1/news/{id}';
};

export type NewsControllerUpdateNewsErrors = {
    401: BaseApiErrorResponse;
};

export type NewsControllerUpdateNewsError = NewsControllerUpdateNewsErrors[keyof NewsControllerUpdateNewsErrors];

export type NewsControllerUpdateNewsResponses = {
    200: ApiResponseOfNewsResponseDto;
};

export type NewsControllerUpdateNewsResponse = NewsControllerUpdateNewsResponses[keyof NewsControllerUpdateNewsResponses];

export type OpportunityControllerGetOpportunitiesData = {
    body?: never;
    path?: never;
    query: {
        /**
         * Optional, defaults to 100
         */
        limit?: number;
        /**
         * Optional, defaults to 0
         */
        offset?: number;
        title: string;
        tagIds: Array<string>;
    };
    url: '/api/v1/opportunities';
};

export type OpportunityControllerGetOpportunitiesErrors = {
    401: BaseApiErrorResponse;
};

export type OpportunityControllerGetOpportunitiesError = OpportunityControllerGetOpportunitiesErrors[keyof OpportunityControllerGetOpportunitiesErrors];

export type OpportunityControllerGetOpportunitiesResponses = {
    200: OpportunityArrayApiResponse;
};

export type OpportunityControllerGetOpportunitiesResponse = OpportunityControllerGetOpportunitiesResponses[keyof OpportunityControllerGetOpportunitiesResponses];

export type OpportunityControllerAddOpportutnityData = {
    body: CreateOpportunityDto;
    path?: never;
    query?: never;
    url: '/api/v1/opportunities';
};

export type OpportunityControllerAddOpportutnityErrors = {
    401: BaseApiErrorResponse;
};

export type OpportunityControllerAddOpportutnityError = OpportunityControllerAddOpportutnityErrors[keyof OpportunityControllerAddOpportutnityErrors];

export type OpportunityControllerAddOpportutnityResponses = {
    200: OpportunityApiResponse;
};

export type OpportunityControllerAddOpportutnityResponse = OpportunityControllerAddOpportutnityResponses[keyof OpportunityControllerAddOpportutnityResponses];

export type OpportunityControllerDeleteOpportunityData = {
    body?: never;
    path: {
        id: string;
    };
    query?: never;
    url: '/api/v1/opportunities/{id}';
};

export type OpportunityControllerDeleteOpportunityErrors = {
    401: BaseApiErrorResponse;
};

export type OpportunityControllerDeleteOpportunityError = OpportunityControllerDeleteOpportunityErrors[keyof OpportunityControllerDeleteOpportunityErrors];

export type OpportunityControllerDeleteOpportunityResponses = {
    200: OpportunityApiResponse;
};

export type OpportunityControllerDeleteOpportunityResponse = OpportunityControllerDeleteOpportunityResponses[keyof OpportunityControllerDeleteOpportunityResponses];

export type OpportunityControllerGetOneOpportunityData = {
    body?: never;
    path: {
        id: string;
    };
    query?: never;
    url: '/api/v1/opportunities/{id}';
};

export type OpportunityControllerGetOneOpportunityErrors = {
    401: BaseApiErrorResponse;
};

export type OpportunityControllerGetOneOpportunityError = OpportunityControllerGetOneOpportunityErrors[keyof OpportunityControllerGetOneOpportunityErrors];

export type OpportunityControllerGetOneOpportunityResponses = {
    200: OpportunityApiResponse;
};

export type OpportunityControllerGetOneOpportunityResponse = OpportunityControllerGetOneOpportunityResponses[keyof OpportunityControllerGetOneOpportunityResponses];

export type OpportunityControllerUpdateOpportunityData = {
    body: UpdateOpportunityDto;
    path: {
        id: string;
    };
    query?: never;
    url: '/api/v1/opportunities/{id}';
};

export type OpportunityControllerUpdateOpportunityErrors = {
    401: BaseApiErrorResponse;
};

export type OpportunityControllerUpdateOpportunityError = OpportunityControllerUpdateOpportunityErrors[keyof OpportunityControllerUpdateOpportunityErrors];

export type OpportunityControllerUpdateOpportunityResponses = {
    200: OpportunityApiResponse;
};

export type OpportunityControllerUpdateOpportunityResponse = OpportunityControllerUpdateOpportunityResponses[keyof OpportunityControllerUpdateOpportunityResponses];

export type AnalyticsControllerGetAdminAnalyticsData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/v1/analytics/admin-dashboard';
};

export type AnalyticsControllerGetAdminAnalyticsResponses = {
    200: ApiResponseOfAdminAnalyticsOutput;
};

export type AnalyticsControllerGetAdminAnalyticsResponse = AnalyticsControllerGetAdminAnalyticsResponses[keyof AnalyticsControllerGetAdminAnalyticsResponses];

export type BlogControllerFindAllBlogsData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * Optional, defaults to 100
         */
        limit?: number;
        /**
         * Optional, defaults to 0
         */
        offset?: number;
        title?: string;
        category?: string;
        author?: string;
        tagIds?: Array<string>;
        isDraft?: boolean;
        isFeatured?: boolean;
    };
    url: '/api/v1/blogs';
};

export type BlogControllerFindAllBlogsErrors = {
    401: BaseApiErrorResponse;
};

export type BlogControllerFindAllBlogsError = BlogControllerFindAllBlogsErrors[keyof BlogControllerFindAllBlogsErrors];

export type BlogControllerFindAllBlogsResponses = {
    200: BlogArrayApiResponse;
};

export type BlogControllerFindAllBlogsResponse = BlogControllerFindAllBlogsResponses[keyof BlogControllerFindAllBlogsResponses];

export type BlogControllerCreateBlogData = {
    body: CreateBlogDto;
    path?: never;
    query?: never;
    url: '/api/v1/blogs';
};

export type BlogControllerCreateBlogErrors = {
    401: BaseApiErrorResponse;
};

export type BlogControllerCreateBlogError = BlogControllerCreateBlogErrors[keyof BlogControllerCreateBlogErrors];

export type BlogControllerCreateBlogResponses = {
    201: BlogApiResponse;
};

export type BlogControllerCreateBlogResponse = BlogControllerCreateBlogResponses[keyof BlogControllerCreateBlogResponses];

export type BlogControllerGetFeaturedBlogsData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/v1/blogs/featured';
};

export type BlogControllerGetFeaturedBlogsErrors = {
    401: BaseApiErrorResponse;
};

export type BlogControllerGetFeaturedBlogsError = BlogControllerGetFeaturedBlogsErrors[keyof BlogControllerGetFeaturedBlogsErrors];

export type BlogControllerGetFeaturedBlogsResponses = {
    200: BlogArrayApiResponse;
};

export type BlogControllerGetFeaturedBlogsResponse = BlogControllerGetFeaturedBlogsResponses[keyof BlogControllerGetFeaturedBlogsResponses];

export type BlogControllerGetPublishedBlogsData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/v1/blogs/published';
};

export type BlogControllerGetPublishedBlogsErrors = {
    401: BaseApiErrorResponse;
};

export type BlogControllerGetPublishedBlogsError = BlogControllerGetPublishedBlogsErrors[keyof BlogControllerGetPublishedBlogsErrors];

export type BlogControllerGetPublishedBlogsResponses = {
    200: BlogArrayApiResponse;
};

export type BlogControllerGetPublishedBlogsResponse = BlogControllerGetPublishedBlogsResponses[keyof BlogControllerGetPublishedBlogsResponses];

export type BlogControllerDeleteBlogData = {
    body?: never;
    path: {
        id: string;
    };
    query?: never;
    url: '/api/v1/blogs/{id}';
};

export type BlogControllerDeleteBlogErrors = {
    404: BaseApiErrorResponse;
};

export type BlogControllerDeleteBlogError = BlogControllerDeleteBlogErrors[keyof BlogControllerDeleteBlogErrors];

export type BlogControllerDeleteBlogResponses = {
    200: BlogApiResponse;
};

export type BlogControllerDeleteBlogResponse = BlogControllerDeleteBlogResponses[keyof BlogControllerDeleteBlogResponses];

export type BlogControllerFindBlogByIdData = {
    body?: never;
    path: {
        id: string;
    };
    query?: never;
    url: '/api/v1/blogs/{id}';
};

export type BlogControllerFindBlogByIdErrors = {
    404: BaseApiErrorResponse;
};

export type BlogControllerFindBlogByIdError = BlogControllerFindBlogByIdErrors[keyof BlogControllerFindBlogByIdErrors];

export type BlogControllerFindBlogByIdResponses = {
    200: BlogApiResponse;
};

export type BlogControllerFindBlogByIdResponse = BlogControllerFindBlogByIdResponses[keyof BlogControllerFindBlogByIdResponses];

export type BlogControllerUpdateBlogData = {
    body: UpdateBlogDto;
    path: {
        id: string;
    };
    query?: never;
    url: '/api/v1/blogs/{id}';
};

export type BlogControllerUpdateBlogErrors = {
    404: BaseApiErrorResponse;
};

export type BlogControllerUpdateBlogError = BlogControllerUpdateBlogErrors[keyof BlogControllerUpdateBlogErrors];

export type BlogControllerUpdateBlogResponses = {
    200: BlogApiResponse;
};

export type BlogControllerUpdateBlogResponse = BlogControllerUpdateBlogResponses[keyof BlogControllerUpdateBlogResponses];

export type EmailSubscriptionControllerSubscribeData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/v1/email-subscription/subscribe';
};

export type EmailSubscriptionControllerSubscribeResponses = {
    201: unknown;
};

export type EmailSubscriptionControllerFindAllData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/v1/email-subscription';
};

export type EmailSubscriptionControllerFindAllResponses = {
    200: unknown;
};

export type EmailSubscriptionControllerRemoveData = {
    body?: never;
    path: {
        id: string;
    };
    query?: never;
    url: '/api/v1/email-subscription/{id}';
};

export type EmailSubscriptionControllerRemoveResponses = {
    200: unknown;
};

export type ClientOptions = {
    baseUrl: string;
};